searchNodes=[{"doc":"","ref":"HillelBudget.html","title":"HillelBudget","type":"module"},{"doc":"A solution to Hillel Wayne's PBT / Example Testing comparison problem Examples The following is allowed because the cost of 2 can be assigned to category b: iex&gt; budget = %{ total_limit : 5 , category_limits : %{ a : 1 , b : 3 } } iex&gt; bill = [ %{ cost : 2 , categories : [ &quot;a&quot; , &quot;b&quot; ] } ] iex&gt; can_afford? ( budget , bill ) true iex&gt; ############################################################## iex&gt; # You might think the following would blow the budget for `b`: iex&gt; bill = [ ...&gt; %{ cost : 2 , categories : [ &quot;a&quot; , &quot;b&quot; ] } , ...&gt; %{ cost : 1 , count : 2 , categories : [ &quot;a&quot; , &quot;b&quot; ] } ...&gt; ] iex&gt; # ... but: iex&gt; can_afford? ( budget , bill ) true iex&gt; # iex&gt; # To see what&#39;s going on, use `affordability` instead of ...&gt; # `can_afford?` ...&gt; # iex&gt; affordability ( budget , bill ) { true , &quot;Total budget remaining: 1&quot; , &quot;Possible category budget allocations follow&quot; , [ %{ a : 0 , b : 0 } ] } iex&gt; # iex&gt; # So the sequence of events was: iex&gt; # 1. 2 was deducted from `b`, leaving {a: 1, b: 1} iex&gt; # 2. 1 was deducted from both &#39;a&#39; and &#39;b&#39;. That is, the two separate iex&gt; # counts were treated separately. iex&gt; # iex&gt; ############################################################## iex&gt; # A further item with no categories won&#39;t break the budget, though it will iex&gt; # reduce the total down to 0: iex&gt; affordability ( budget , bill ++ [ %{ cost : 1 } ] ) { true , &quot;Total budget remaining: 0&quot; , &quot;Possible category budget allocations follow&quot; , [ %{ a : 0 , b : 0 } ] } iex&gt; # iex&gt; ############################################################## iex&gt; # But putting that final wafer-thin charge into a category instead iex&gt; # of no category will (at last!) break the budget. iex&gt; # iex&gt; can_afford? ( budget , bill ++ [ %{ cost : 1 , categories : [ &quot;a&quot; ] } ] ) false Here's a larger example of a budget. Note that some items might refer to categories without budgets. iex&gt; budget = %{ ...&gt; total_limit : 50 , ...&gt; category_limits : %{ ...&gt; food : 10 , ...&gt; rent : 11 , ...&gt; candles : 49 ...&gt; } ...&gt; } iex&gt; bill = [ ...&gt; %{ cost : 5 } , ...&gt; %{ cost : 1 , count : 3 } , ...&gt; %{ cost : 2 , categories : [ &quot;food&quot; , &quot;gym&quot; ] } , ...&gt; %{ cost : 1 , count : 2 , categories : [ &quot;transit&quot; ] } ...&gt; ] iex&gt; HillelBudget . can_afford? ( budget , bill ) true","ref":"HillelBudget.html#can_afford?/2","title":"HillelBudget.can_afford?/2","type":"function"},{"doc":"","ref":"HillelBudget.Item.html","title":"HillelBudget.Item","type":"module"},{"doc":"","ref":"HillelBudget.Item.html#favor_fewer_categories/1","title":"HillelBudget.Item.favor_fewer_categories/1","type":"function"},{"doc":"","ref":"HillelBudget.Item.html#item/2","title":"HillelBudget.Item.item/2","type":"function"},{"doc":"","ref":"HillelBudget.Item.html#normalize/1","title":"HillelBudget.Item.normalize/1","type":"function"},{"doc":"A limit-holder is a map of key-value pairs where the pairs are integers that represent a limit on spending. The limits may be negative if spending has exceeded the limit.","ref":"HillelBudget.LimitHolder.html","title":"HillelBudget.LimitHolder","type":"module"},{"doc":"","ref":"HillelBudget.LimitHolder.html#apply_item/2","title":"HillelBudget.LimitHolder.apply_item/2","type":"function"},{"doc":"","ref":"HillelBudget.LimitHolder.html#decrement/3","title":"HillelBudget.LimitHolder.decrement/3","type":"function"},{"doc":"","ref":"HillelBudget.LimitHolder.html#surviving_holders/2","title":"HillelBudget.LimitHolder.surviving_holders/2","type":"function"}]